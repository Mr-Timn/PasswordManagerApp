#ifndef PASSWORD_MANAGER_AES_H
#define PASSWORD_MANAGER_AES_H

#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>

static const uint8_t AES_SBOX[16][16] = {
	{ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76 },
	{ 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0 },
	{ 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15 },
	{ 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75 },
	{ 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84 },
	{ 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF },
	{ 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8 },
	{ 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2 },
	{ 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73 },
	{ 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB },
	{ 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79 },
	{ 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08 },
	{ 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A },
	{ 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E },
	{ 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF },
	{ 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 }
};
static const uint8_t AES_INVSBOX[16][16] = {
	{ 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB },
	{ 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB },
	{ 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E },
	{ 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25 },
	{ 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92 },
	{ 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84 },
	{ 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06 },
	{ 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B },
	{ 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73 },
	{ 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E },
	{ 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B },
	{ 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4 },
	{ 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F },
	{ 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF },
	{ 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61 },
	{ 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D }
};
static const uint8_t AES_GFMUL[256][6] = {
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, { 0x02, 0x03, 0x09, 0x0B, 0x0D, 0x0E },
	{ 0x04, 0x06, 0x12, 0x16, 0x1A, 0x1C}, { 0x06, 0x05, 0x1B, 0x1D, 0x17, 0x12 },
	{ 0x08, 0x0C, 0x24, 0x2C, 0x34, 0x38}, { 0x0A, 0x0F, 0x2D, 0x27, 0x39, 0x36 },
	{ 0x0C, 0x0A, 0x36, 0x3A, 0x2E, 0x24}, { 0x0E, 0x09, 0x3F, 0x31, 0x23, 0x2A },
	{ 0x10, 0x18, 0x48, 0x58, 0x68, 0x70}, { 0x12, 0x1B, 0x41, 0x53, 0x65, 0x7E },
	{ 0x14, 0x1E, 0x5A, 0x4E, 0x72, 0x6C}, { 0x16, 0x1D, 0x53, 0x45, 0x7F, 0x62 },
	{ 0x18, 0x14, 0x6C, 0x74, 0x5C, 0x48}, { 0x1A, 0x17, 0x65, 0x7F, 0x51, 0x46 },
	{ 0x1C, 0x12, 0x7E, 0x62, 0x46, 0x54}, { 0x1E, 0x11, 0x77, 0x69, 0x4B, 0x5A },
	{ 0x20, 0x30, 0x90, 0xB0, 0xD0, 0xE0}, { 0x22, 0x33, 0x99, 0xBB, 0xDD, 0xEE },
	{ 0x24, 0x36, 0x82, 0xA6, 0xCA, 0xFC}, { 0x26, 0x35, 0x8B, 0xAD, 0xC7, 0xF2 },
	{ 0x28, 0x3C, 0xB4, 0x9C, 0xE4, 0xD8}, { 0x2A, 0x3F, 0xBD, 0x97, 0xE9, 0xD6 },
	{ 0x2C, 0x3A, 0xA6, 0x8A, 0xFE, 0xC4}, { 0x2E, 0x39, 0xAF, 0x81, 0xF3, 0xCA },
	{ 0x30, 0x28, 0xD8, 0xE8, 0xB8, 0x90}, { 0x32, 0x2B, 0xD1, 0xE3, 0xB5, 0x9E },
	{ 0x34, 0x2E, 0xCA, 0xFE, 0xA2, 0x8C}, { 0x36, 0x2D, 0xC3, 0xF5, 0xAF, 0x82 },
	{ 0x38, 0x24, 0xFC, 0xC4, 0x8C, 0xA8}, { 0x3A, 0x27, 0xF5, 0xCF, 0x81, 0xA6 },
	{ 0x3C, 0x22, 0xEE, 0xD2, 0x96, 0xB4}, { 0x3E, 0x21, 0xE7, 0xD9, 0x9B, 0xBA },
	{ 0x40, 0x60, 0x3B, 0x7B, 0xBB, 0xDB}, { 0x42, 0x63, 0x32, 0x70, 0xB6, 0xD5 },
	{ 0x44, 0x66, 0x29, 0x6D, 0xA1, 0xC7}, { 0x46, 0x65, 0x20, 0x66, 0xAC, 0xC9 },
	{ 0x48, 0x6C, 0x1F, 0x57, 0x8F, 0xE3}, { 0x4A, 0x6F, 0x16, 0x5C, 0x82, 0xED },
	{ 0x4C, 0x6A, 0x0D, 0x41, 0x95, 0xFF}, { 0x4E, 0x69, 0x04, 0x4A, 0x98, 0xF1 },
	{ 0x50, 0x78, 0x73, 0x23, 0xD3, 0xAB}, { 0x52, 0x7B, 0x7A, 0x28, 0xDE, 0xA5 },
	{ 0x54, 0x7E, 0x61, 0x35, 0xC9, 0xB7}, { 0x56, 0x7D, 0x68, 0x3E, 0xC4, 0xB9 },
	{ 0x58, 0x74, 0x57, 0x0F, 0xE7, 0x93}, { 0x5A, 0x77, 0x5E, 0x04, 0xEA, 0x9D },
	{ 0x5C, 0x72, 0x45, 0x19, 0xFD, 0x8F}, { 0x5E, 0x71, 0x4C, 0x12, 0xF0, 0x81 },
	{ 0x60, 0x50, 0xAB, 0xCB, 0x6B, 0x3B}, { 0x62, 0x53, 0xA2, 0xC0, 0x66, 0x35 },
	{ 0x64, 0x56, 0xB9, 0xDD, 0x71, 0x27}, { 0x66, 0x55, 0xB0, 0xD6, 0x7C, 0x29 },
	{ 0x68, 0x5C, 0x8F, 0xE7, 0x5F, 0x03}, { 0x6A, 0x5F, 0x86, 0xEC, 0x52, 0x0D },
	{ 0x6C, 0x5A, 0x9D, 0xF1, 0x45, 0x1F}, { 0x6E, 0x59, 0x94, 0xFA, 0x48, 0x11 },
	{ 0x70, 0x48, 0xE3, 0x93, 0x03, 0x4B}, { 0x72, 0x4B, 0xEA, 0x98, 0x0E, 0x45 },
	{ 0x74, 0x4E, 0xF1, 0x85, 0x19, 0x57}, { 0x76, 0x4D, 0xF8, 0x8E, 0x14, 0x59 },
	{ 0x78, 0x44, 0xC7, 0xBF, 0x37, 0x73}, { 0x7A, 0x47, 0xCE, 0xB4, 0x3A, 0x7D },
	{ 0x7C, 0x42, 0xD5, 0xA9, 0x2D, 0x6F}, { 0x7E, 0x41, 0xDC, 0xA2, 0x20, 0x61 },
	{ 0x80, 0xC0, 0x76, 0xF6, 0x6D, 0xAD}, { 0x82, 0xC3, 0x7F, 0xFD, 0x60, 0xA3 },
	{ 0x84, 0xC6, 0x64, 0xE0, 0x77, 0xB1}, { 0x86, 0xC5, 0x6D, 0xEB, 0x7A, 0xBF },
	{ 0x88, 0xCC, 0x52, 0xDA, 0x59, 0x95}, { 0x8A, 0xCF, 0x5B, 0xD1, 0x54, 0x9B },
	{ 0x8C, 0xCA, 0x40, 0xCC, 0x43, 0x89}, { 0x8E, 0xC9, 0x49, 0xC7, 0x4E, 0x87 },
	{ 0x90, 0xD8, 0x3E, 0xAE, 0x05, 0xDD}, { 0x92, 0xDB, 0x37, 0xA5, 0x08, 0xD3 },
	{ 0x94, 0xDE, 0x2C, 0xB8, 0x1F, 0xC1}, { 0x96, 0xDD, 0x25, 0xB3, 0x12, 0xCF },
	{ 0x98, 0xD4, 0x1A, 0x82, 0x31, 0xE5}, { 0x9A, 0xD7, 0x13, 0x89, 0x3C, 0xEB },
	{ 0x9C, 0xD2, 0x08, 0x94, 0x2B, 0xF9}, { 0x9E, 0xD1, 0x01, 0x9F, 0x26, 0xF7 },
	{ 0xA0, 0xF0, 0xE6, 0x46, 0xBD, 0x4D}, { 0xA2, 0xF3, 0xEF, 0x4D, 0xB0, 0x43 },
	{ 0xA4, 0xF6, 0xF4, 0x50, 0xA7, 0x51}, { 0xA6, 0xF5, 0xFD, 0x5B, 0xAA, 0x5F },
	{ 0xA8, 0xFC, 0xC2, 0x6A, 0x89, 0x75}, { 0xAA, 0xFF, 0xCB, 0x61, 0x84, 0x7B },
	{ 0xAC, 0xFA, 0xD0, 0x7C, 0x93, 0x69}, { 0xAE, 0xF9, 0xD9, 0x77, 0x9E, 0x67 },
	{ 0xB0, 0xE8, 0xAE, 0x1E, 0xD5, 0x3D}, { 0xB2, 0xEB, 0xA7, 0x15, 0xD8, 0x33 },
	{ 0xB4, 0xEE, 0xBC, 0x08, 0xCF, 0x21}, { 0xB6, 0xED, 0xB5, 0x03, 0xC2, 0x2F },
	{ 0xB8, 0xE4, 0x8A, 0x32, 0xE1, 0x05}, { 0xBA, 0xE7, 0x83, 0x39, 0xEC, 0x0B },
	{ 0xBC, 0xE2, 0x98, 0x24, 0xFB, 0x19}, { 0xBE, 0xE1, 0x91, 0x2F, 0xF6, 0x17 },
	{ 0xC0, 0xA0, 0x4D, 0x8D, 0xD6, 0x76}, { 0xC2, 0xA3, 0x44, 0x86, 0xDB, 0x78 },
	{ 0xC4, 0xA6, 0x5F, 0x9B, 0xCC, 0x6A}, { 0xC6, 0xA5, 0x56, 0x90, 0xC1, 0x64 },
	{ 0xC8, 0xAC, 0x69, 0xA1, 0xE2, 0x4E}, { 0xCA, 0xAF, 0x60, 0xAA, 0xEF, 0x40 },
	{ 0xCC, 0xAA, 0x7B, 0xB7, 0xF8, 0x52}, { 0xCE, 0xA9, 0x72, 0xBC, 0xF5, 0x5C },
	{ 0xD0, 0xB8, 0x05, 0xD5, 0xBE, 0x06}, { 0xD2, 0xBB, 0x0C, 0xDE, 0xB3, 0x08 },
	{ 0xD4, 0xBE, 0x17, 0xC3, 0xA4, 0x1A}, { 0xD6, 0xBD, 0x1E, 0xC8, 0xA9, 0x14 },
	{ 0xD8, 0xB4, 0x21, 0xF9, 0x8A, 0x3E}, { 0xDA, 0xB7, 0x28, 0xF2, 0x87, 0x30 },
	{ 0xDC, 0xB2, 0x33, 0xEF, 0x90, 0x22}, { 0xDE, 0xB1, 0x3A, 0xE4, 0x9D, 0x2C },
	{ 0xE0, 0x90, 0xDD, 0x3D, 0x06, 0x96}, { 0xE2, 0x93, 0xD4, 0x36, 0x0B, 0x98 },
	{ 0xE4, 0x96, 0xCF, 0x2B, 0x1C, 0x8A}, { 0xE6, 0x95, 0xC6, 0x20, 0x11, 0x84 },
	{ 0xE8, 0x9C, 0xF9, 0x11, 0x32, 0xAE}, { 0xEA, 0x9F, 0xF0, 0x1A, 0x3F, 0xA0 },
	{ 0xEC, 0x9A, 0xEB, 0x07, 0x28, 0xB2}, { 0xEE, 0x99, 0xE2, 0x0C, 0x25, 0xBC },
	{ 0xF0, 0x88, 0x95, 0x65, 0x6E, 0xE6}, { 0xF2, 0x8B, 0x9C, 0x6E, 0x63, 0xE8 },
	{ 0xF4, 0x8E, 0x87, 0x73, 0x74, 0xFA}, { 0xF6, 0x8D, 0x8E, 0x78, 0x79, 0xF4 },
	{ 0xF8, 0x84, 0xB1, 0x49, 0x5A, 0xDE}, { 0xFA, 0x87, 0xB8, 0x42, 0x57, 0xD0 },
	{ 0xFC, 0x82, 0xA3, 0x5F, 0x40, 0xC2}, { 0xFE, 0x81, 0xAA, 0x54, 0x4D, 0xCC },
	{ 0x1B, 0x9B, 0xEC, 0xF7, 0xDA, 0x41}, { 0x19, 0x98, 0xE5, 0xFC, 0xD7, 0x4F },
	{ 0x1F, 0x9D, 0xFE, 0xE1, 0xC0, 0x5D}, { 0x1D, 0x9E, 0xF7, 0xEA, 0xCD, 0x53 },
	{ 0x13, 0x97, 0xC8, 0xDB, 0xEE, 0x79}, { 0x11, 0x94, 0xC1, 0xD0, 0xE3, 0x77 },
	{ 0x17, 0x91, 0xDA, 0xCD, 0xF4, 0x65}, { 0x15, 0x92, 0xD3, 0xC6, 0xF9, 0x6B },
	{ 0x0B, 0x83, 0xA4, 0xAF, 0xB2, 0x31}, { 0x09, 0x80, 0xAD, 0xA4, 0xBF, 0x3F },
	{ 0x0F, 0x85, 0xB6, 0xB9, 0xA8, 0x2D}, { 0x0D, 0x86, 0xBF, 0xB2, 0xA5, 0x23 },
	{ 0x03, 0x8F, 0x80, 0x83, 0x86, 0x09}, { 0x01, 0x8C, 0x89, 0x88, 0x8B, 0x07 },
	{ 0x07, 0x89, 0x92, 0x95, 0x9C, 0x15}, { 0x05, 0x8A, 0x9B, 0x9E, 0x91, 0x1B },
	{ 0x3B, 0xAB, 0x7C, 0x47, 0x0A, 0xA1}, { 0x39, 0xA8, 0x75, 0x4C, 0x07, 0xAF },
	{ 0x3F, 0xAD, 0x6E, 0x51, 0x10, 0xBD}, { 0x3D, 0xAE, 0x67, 0x5A, 0x1D, 0xB3 },
	{ 0x33, 0xA7, 0x58, 0x6B, 0x3E, 0x99}, { 0x31, 0xA4, 0x51, 0x60, 0x33, 0x97 },
	{ 0x37, 0xA1, 0x4A, 0x7D, 0x24, 0x85}, { 0x35, 0xA2, 0x43, 0x76, 0x29, 0x8B },
	{ 0x2B, 0xB3, 0x34, 0x1F, 0x62, 0xD1}, { 0x29, 0xB0, 0x3D, 0x14, 0x6F, 0xDF },
	{ 0x2F, 0xB5, 0x26, 0x09, 0x78, 0xCD}, { 0x2D, 0xB6, 0x2F, 0x02, 0x75, 0xC3 },
	{ 0x23, 0xBF, 0x10, 0x33, 0x56, 0xE9}, { 0x21, 0xBC, 0x19, 0x38, 0x5B, 0xE7 },
	{ 0x27, 0xB9, 0x02, 0x25, 0x4C, 0xF5}, { 0x25, 0xBA, 0x0B, 0x2E, 0x41, 0xFB },
	{ 0x5B, 0xFB, 0xD7, 0x8C, 0x61, 0x9A}, { 0x59, 0xF8, 0xDE, 0x87, 0x6C, 0x94 },
	{ 0x5F, 0xFD, 0xC5, 0x9A, 0x7B, 0x86}, { 0x5D, 0xFE, 0xCC, 0x91, 0x76, 0x88 },
	{ 0x53, 0xF7, 0xF3, 0xA0, 0x55, 0xA2}, { 0x51, 0xF4, 0xFA, 0xAB, 0x58, 0xAC },
	{ 0x57, 0xF1, 0xE1, 0xB6, 0x4F, 0xBE}, { 0x55, 0xF2, 0xE8, 0xBD, 0x42, 0xB0 },
	{ 0x4B, 0xE3, 0x9F, 0xD4, 0x09, 0xEA}, { 0x49, 0xE0, 0x96, 0xDF, 0x04, 0xE4 },
	{ 0x4F, 0xE5, 0x8D, 0xC2, 0x13, 0xF6}, { 0x4D, 0xE6, 0x84, 0xC9, 0x1E, 0xF8 },
	{ 0x43, 0xEF, 0xBB, 0xF8, 0x3D, 0xD2}, { 0x41, 0xEC, 0xB2, 0xF3, 0x30, 0xDC },
	{ 0x47, 0xE9, 0xA9, 0xEE, 0x27, 0xCE}, { 0x45, 0xEA, 0xA0, 0xE5, 0x2A, 0xC0 },
	{ 0x7B, 0xCB, 0x47, 0x3C, 0xB1, 0x7A}, { 0x79, 0xC8, 0x4E, 0x37, 0xBC, 0x74 },
	{ 0x7F, 0xCD, 0x55, 0x2A, 0xAB, 0x66}, { 0x7D, 0xCE, 0x5C, 0x21, 0xA6, 0x68 },
	{ 0x73, 0xC7, 0x63, 0x10, 0x85, 0x42}, { 0x71, 0xC4, 0x6A, 0x1B, 0x88, 0x4C },
	{ 0x77, 0xC1, 0x71, 0x06, 0x9F, 0x5E}, { 0x75, 0xC2, 0x78, 0x0D, 0x92, 0x50 },
	{ 0x6B, 0xD3, 0x0F, 0x64, 0xD9, 0x0A}, { 0x69, 0xD0, 0x06, 0x6F, 0xD4, 0x04 },
	{ 0x6F, 0xD5, 0x1D, 0x72, 0xC3, 0x16}, { 0x6D, 0xD6, 0x14, 0x79, 0xCE, 0x18 },
	{ 0x63, 0xDF, 0x2B, 0x48, 0xED, 0x32}, { 0x61, 0xDC, 0x22, 0x43, 0xE0, 0x3C },
	{ 0x67, 0xD9, 0x39, 0x5E, 0xF7, 0x2E}, { 0x65, 0xDA, 0x30, 0x55, 0xFA, 0x20 },
	{ 0x9B, 0x5B, 0x9A, 0x01, 0xB7, 0xEC}, { 0x99, 0x58, 0x93, 0x0A, 0xBA, 0xE2 },
	{ 0x9F, 0x5D, 0x88, 0x17, 0xAD, 0xF0}, { 0x9D, 0x5E, 0x81, 0x1C, 0xA0, 0xFE },
	{ 0x93, 0x57, 0xBE, 0x2D, 0x83, 0xD4}, { 0x91, 0x54, 0xB7, 0x26, 0x8E, 0xDA },
	{ 0x97, 0x51, 0xAC, 0x3B, 0x99, 0xC8}, { 0x95, 0x52, 0xA5, 0x30, 0x94, 0xC6 },
	{ 0x8B, 0x43, 0xD2, 0x59, 0xDF, 0x9C}, { 0x89, 0x40, 0xDB, 0x52, 0xD2, 0x92 },
	{ 0x8F, 0x45, 0xC0, 0x4F, 0xC5, 0x80}, { 0x8D, 0x46, 0xC9, 0x44, 0xC8, 0x8E },
	{ 0x83, 0x4F, 0xF6, 0x75, 0xEB, 0xA4}, { 0x81, 0x4C, 0xFF, 0x7E, 0xE6, 0xAA },
	{ 0x87, 0x49, 0xE4, 0x63, 0xF1, 0xB8}, { 0x85, 0x4A, 0xED, 0x68, 0xFC, 0xB6 },
	{ 0xBB, 0x6B, 0x0A, 0xB1, 0x67, 0x0C}, { 0xB9, 0x68, 0x03, 0xBA, 0x6A, 0x02 },
	{ 0xBF, 0x6D, 0x18, 0xA7, 0x7D, 0x10}, { 0xBD, 0x6E, 0x11, 0xAC, 0x70, 0x1E },
	{ 0xB3, 0x67, 0x2E, 0x9D, 0x53, 0x34}, { 0xB1, 0x64, 0x27, 0x96, 0x5E, 0x3A },
	{ 0xB7, 0x61, 0x3C, 0x8B, 0x49, 0x28}, { 0xB5, 0x62, 0x35, 0x80, 0x44, 0x26 },
	{ 0xAB, 0x73, 0x42, 0xE9, 0x0F, 0x7C}, { 0xA9, 0x70, 0x4B, 0xE2, 0x02, 0x72 },
	{ 0xAF, 0x75, 0x50, 0xFF, 0x15, 0x60}, { 0xAD, 0x76, 0x59, 0xF4, 0x18, 0x6E },
	{ 0xA3, 0x7F, 0x66, 0xC5, 0x3B, 0x44}, { 0xA1, 0x7C, 0x6F, 0xCE, 0x36, 0x4A },
	{ 0xA7, 0x79, 0x74, 0xD3, 0x21, 0x58}, { 0xA5, 0x7A, 0x7D, 0xD8, 0x2C, 0x56 },
	{ 0xDB, 0x3B, 0xA1, 0x7A, 0x0C, 0x37}, { 0xD9, 0x38, 0xA8, 0x71, 0x01, 0x39 },
	{ 0xDF, 0x3D, 0xB3, 0x6C, 0x16, 0x2B}, { 0xDD, 0x3E, 0xBA, 0x67, 0x1B, 0x25 },
	{ 0xD3, 0x37, 0x85, 0x56, 0x38, 0x0F}, { 0xD1, 0x34, 0x8C, 0x5D, 0x35, 0x01 },
	{ 0xD7, 0x31, 0x97, 0x40, 0x22, 0x13}, { 0xD5, 0x32, 0x9E, 0x4B, 0x2F, 0x1D },
	{ 0xCB, 0x23, 0xE9, 0x22, 0x64, 0x47}, { 0xC9, 0x20, 0xE0, 0x29, 0x69, 0x49 },
	{ 0xCF, 0x25, 0xFB, 0x34, 0x7E, 0x5B}, { 0xCD, 0x26, 0xF2, 0x3F, 0x73, 0x55 },
	{ 0xC3, 0x2F, 0xCD, 0x0E, 0x50, 0x7F}, { 0xC1, 0x2C, 0xC4, 0x05, 0x5D, 0x71 },
	{ 0xC7, 0x29, 0xDF, 0x18, 0x4A, 0x63}, { 0xC5, 0x2A, 0xD6, 0x13, 0x47, 0x6D },
	{ 0xFB, 0x0B, 0x31, 0xCA, 0xDC, 0xD7}, { 0xF9, 0x08, 0x38, 0xC1, 0xD1, 0xD9 },
	{ 0xFF, 0x0D, 0x23, 0xDC, 0xC6, 0xCB}, { 0xFD, 0x0E, 0x2A, 0xD7, 0xCB, 0xC5 },
	{ 0xF3, 0x07, 0x15, 0xE6, 0xE8, 0xEF}, { 0xF1, 0x04, 0x1C, 0xED, 0xE5, 0xE1 },
	{ 0xF7, 0x01, 0x07, 0xF0, 0xF2, 0xF3}, { 0xF5, 0x02, 0x0E, 0xFB, 0xFF, 0xFD },
	{ 0xEB, 0x13, 0x79, 0x92, 0xB4, 0xA7}, { 0xE9, 0x10, 0x70, 0x99, 0xB9, 0xA9 },
	{ 0xEF, 0x15, 0x6B, 0x84, 0xAE, 0xBB}, { 0xED, 0x16, 0x62, 0x8F, 0xA3, 0xB5 },
	{ 0xE3, 0x1F, 0x5D, 0xBE, 0x80, 0x9F}, { 0xE1, 0x1C, 0x54, 0xB5, 0x8D, 0x91 },
	{ 0xE7, 0x19, 0x4F, 0xA8, 0x9A, 0x83}, { 0xE5, 0x1A, 0x46, 0xA3, 0x97, 0x8D }
};

#define ROTLEFT32(a, b)  (((a) << (b)) | ((a) >> (32 - (b))))
#define uchar_t unsigned char
#define uintll_t unsigned long long

static int randlock = -1;
static inline void randdelay(unsigned int count) {
	while (count > 0) count--;
}

int Secure_randombytes(uchar_t* random_array, uintll_t nbytes) {
	int r, n = (int)nbytes, count = 0;
	if (randlock == -1) {
		do {
			randlock = open("/dev/urandom", O_RDONLY);
			if (randlock == -1) randdelay(0xFFFFF);
		} while (randlock == -1);
	}
	while (n > 0) {
		do {
			r = read(randlock, random_array+count, n);
			if (r == -1) randdelay(0xFFFF);
		} while (r == -1);
		count += r;
		n -= r;
	}
	return 0;
}

uint32_t SubWord(uint32_t word) {
	return
			(AES_SBOX[(word >> 4)  & 0x0000000F][(word >> 0)  & 0x0000000F] << 0)  |
			(AES_SBOX[(word >> 12) & 0x0000000F][(word >> 8)  & 0x0000000F] << 8)  |
			(AES_SBOX[(word >> 20) & 0x0000000F][(word >> 16) & 0x0000000F] << 16) |
			(AES_SBOX[(word >> 28) & 0x0000000F][(word >> 24) & 0x0000000F] << 24) ;
}
void AddRoundKey(uint8_t state[][4], uint32_t* skey) {
	for (int y = 0; y < 4; y++) {
		for (int x = 0; x < 4; x++) {
			state[y][x] ^= ((skey[y] >> (24 - (8 * x))) & 0xFF);
		} }
}

void SubBytes(uint8_t s[][4]) {
	for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { s[y][x] = AES_SBOX[s[y][x] >> 4][s[y][x] & 0x0F]; } }
}
void ShiftRows(uint8_t s[][4]) {
	uint8_t c[4][4]; for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { c[y][x] = s[y][x]; } }

	s[0][1] = c[1][1];
	s[1][1] = c[2][1];
	s[2][1] = c[3][1];
	s[3][1] = c[0][1];

	s[0][2] = c[2][2];
	s[1][2] = c[3][2];
	s[2][2] = c[0][2];
	s[3][2] = c[1][2];

	s[0][3] = c[3][3];
	s[1][3] = c[0][3];
	s[2][3] = c[1][3];
	s[3][3] = c[2][3];
}
void MixColumns(uint8_t s[][4]) {
	auto mix = [&](uint8_t r[4]) {
		uint8_t a[4], b[4], h;
		for (uint8_t c = 0; c < 4; c++) {
			a[c] = r[c];
			h = (r[c] >> 7) & 1;
			b[c] = r[c] << 1;
			b[c] ^= h * 0x1B;
		}

		r[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
		r[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
		r[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
		r[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
	};

	for (int i = 0; i < 4; i++) mix(s[i]);
}

void InvSubBytes(uint8_t s[][4]) {
	for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { s[y][x] = AES_INVSBOX[s[y][x] >> 4][s[y][x] & 0x0F]; } }
}
void InvShiftRows(uint8_t s[][4]) {
	uint8_t c[4][4]; for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { c[y][x] = s[y][x]; } }

	s[0][1] = c[3][1];
	s[1][1] = c[0][1];
	s[2][1] = c[1][1];
	s[3][1] = c[2][1];

	s[0][2] = c[2][2];
	s[1][2] = c[3][2];
	s[2][2] = c[0][2];
	s[3][2] = c[1][2];

	s[0][3] = c[1][3];
	s[1][3] = c[2][3];
	s[2][3] = c[3][3];
	s[3][3] = c[0][3];
}
void InvMixColumns(uint8_t s[][4]) {
	uint8_t col[4];
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) col[j] = s[i][j];

		s[i][0]  = AES_GFMUL[col[0]][5];
		s[i][0] ^= AES_GFMUL[col[1]][3];
		s[i][0] ^= AES_GFMUL[col[2]][4];
		s[i][0] ^= AES_GFMUL[col[3]][2];

		s[i][1]  = AES_GFMUL[col[0]][2];
		s[i][1] ^= AES_GFMUL[col[1]][5];
		s[i][1] ^= AES_GFMUL[col[2]][3];
		s[i][1] ^= AES_GFMUL[col[3]][4];

		s[i][2]  = AES_GFMUL[col[0]][4];
		s[i][2] ^= AES_GFMUL[col[1]][2];
		s[i][2] ^= AES_GFMUL[col[2]][5];
		s[i][2] ^= AES_GFMUL[col[3]][3];

		s[i][3]  = AES_GFMUL[col[0]][3];
		s[i][3] ^= AES_GFMUL[col[1]][4];
		s[i][3] ^= AES_GFMUL[col[2]][2];
		s[i][3] ^= AES_GFMUL[col[3]][5];
	}
}

void aes_encrypt(const uint8_t in[], uint8_t out[], uint32_t* skey, int rounds) {
	uint8_t state[4][4]; uint8_t i;

	for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { state[y][x] = in[(y * 4) + x]; } }

	AddRoundKey(state, &skey[0]);
	for (i = 1; i < rounds; i++) {
		SubBytes(state); ShiftRows(state); MixColumns(state); AddRoundKey(state, &skey[i * 4]);
	}
	SubBytes(state); ShiftRows(state); AddRoundKey(state, &skey[i * 4]);

	for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { out[(y * 4) + x] = state[y][x]; } }
}
void aes_decrypt(const uint8_t in[], uint8_t out[], uint32_t* skey, int rounds) {
	uint8_t state[4][4]; uint8_t i = rounds;

	for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { state[y][x] = in[(y * 4) + x]; } }

	AddRoundKey(state, &skey[i * 4]);
	for (i = rounds - 1; i > 0; i--) {
		InvShiftRows(state); InvSubBytes(state); AddRoundKey(state, &skey[i * 4]); InvMixColumns(state);
	}
	InvShiftRows(state); InvSubBytes(state); AddRoundKey(state, &skey[0]);

	for (int y = 0; y < 4; y++) { for (int x = 0; x < 4; x++) { out[(y * 4) + x] = state[y][x]; } }
}

enum class Encryption { AES128, AES192, AES256 };
enum AESMode { ECB, CBC };

struct AESKeySet {
	uint8_t* key = NULL;
	uint32_t* keyschedule = NULL;
	size_t rounds = 0, NK = 0, NB = 4;
	int mode = AESMode::CBC;

	uint32_t iv[4], cp[4];

	size_t paddingpos(size_t len) {
		switch (mode) {
			case 0: return len - 1; break;
			case 1: return len - 1 - 16; break;
			default: return 0;
		}
	}
	size_t paddinglen(size_t len) {
		switch (mode) {
			case 0: return 16 - (len % 16); break;
			case 1: return 32 - (len % 16); break;
			default: return 0;
		}
	}

	void save_iv() {
		cp[0] = iv[0];
		cp[1] = iv[1];
		cp[2] = iv[2];
		cp[3] = iv[3];
	}
	void load_iv() {
		iv[0] = cp[0];
		iv[1] = cp[1];
		iv[2] = cp[2];
		iv[3] = cp[3];
	}
	void load_iv(uint32_t* data) {
		iv[0] = data[0];
		iv[1] = data[1];
		iv[2] = data[2];
		iv[3] = data[3];
	}
	void xor_iv(uint32_t* data) {
		data[0] ^= iv[0];
		data[1] ^= iv[1];
		data[2] ^= iv[2];
		data[3] ^= iv[3];
	}
	void load_cp(uint32_t* data) {
		cp[0] = data[0];
		cp[1] = data[1];
		cp[2] = data[2];
		cp[3] = data[3];
	}
	void random_iv() {
		Secure_randombytes((uchar_t*)&iv, 16);
	}

	void encryptblock(char* data) {
		aes_encrypt((uint8_t*)data, (uint8_t*)data, keyschedule, rounds);
	}
	void encrypt(char* data, size_t blocks) {
		for (size_t i = 0; i < blocks; i++) encryptblock(&data[i * 16]);
	}
	void decryptblock(char* data) {
		aes_decrypt((uint8_t*)data, (uint8_t*)data, keyschedule, rounds);
	}
	void decrypt(char* data, size_t blocks) {
		for (size_t i = 0; i < blocks; i++) decryptblock(&data[i * 16]);
	}
};

void aes_key_setup(AESKeySet* AESKey) {
	const uint32_t AES_RCON[] = { 0x00000000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000, 0x6C000000, 0xD8000000, 0xAB000000, 0x4D000000, 0x9A000000 };
	for (int i = 0; i < AESKey->NK; ++i)                  AESKey->keyschedule[i] = (AESKey->key[(4 * i) + 0] << 24) | (AESKey->key[(4 * i) + 1] << 16) | (AESKey->key[(4 * i) + 2] << 8) | (AESKey->key[(4 * i) + 3] << 0);
	for (int i = AESKey->NK; i < 4 * (AESKey->rounds + 1); i++) {
		if (i % AESKey->NK == 0)                          AESKey->keyschedule[i] = AESKey->keyschedule[i - AESKey->NK] ^ (SubWord(ROTLEFT32(AESKey->keyschedule[i - 1], 8)) ^ AES_RCON[i / AESKey->NK]);
		else if (AESKey->NK > 6 && (i % AESKey->NK) == 4) AESKey->keyschedule[i] = AESKey->keyschedule[i - AESKey->NK] ^ (SubWord(AESKey->keyschedule[i - 1]));
		else                                              AESKey->keyschedule[i] = AESKey->keyschedule[i - AESKey->NK] ^ AESKey->keyschedule[i - 1];
	}
}
void initAESKey(Encryption Encryption, AESKeySet* KeySet) {
	switch (Encryption) {
		case Encryption::AES128: KeySet->rounds = 10; KeySet->NK = 4; break;
		case Encryption::AES192: KeySet->rounds = 12; KeySet->NK = 6; break;
		case Encryption::AES256: KeySet->rounds = 14; KeySet->NK = 8; break;
	}

	if (KeySet->keyschedule == NULL) KeySet->keyschedule = (uint32_t*)malloc(sizeof(uint32_t) * (4 * (KeySet->rounds + 1)));
	else KeySet->keyschedule = (uint32_t*)realloc(KeySet->keyschedule, sizeof(uint32_t) * (4 * (KeySet->rounds + 1)));
	aes_key_setup(KeySet);
}

size_t encryptAES(std::string& Data, AESKeySet* KeySet) {
	uint8_t padding = 16 - (Data.length() % 16);
	for (uint8_t i = 1; i < padding; i++) Data += ((char) (rand() % 0xFF));
	Data += ((char)padding);

	const size_t blocks = Data.length() / 16;
	switch (KeySet->mode) {
		case 0: {
			KeySet->encrypt(&Data[0], blocks);
			break;
		}
		case 1: {
			KeySet->random_iv();
			KeySet->save_iv();
			for (size_t i = 0; i < blocks; i++) {
				KeySet->xor_iv((uint32_t *)(&Data[i * 16]));
				KeySet->encryptblock(&Data[i * 16]);
				KeySet->load_iv((uint32_t *)(&Data[i * 16]));
			}

			Data.resize(Data.length() + 16);
			memcpy(&Data[Data.length() - 16], &KeySet->cp, 16);
			KeySet->encryptblock(&Data[Data.length() - 16]);
			break;
		}
	}

	return Data.length();
}

size_t decryptAES(char* Data, size_t Length, AESKeySet* KeySet) {
	if (Length % 16 != 0) {
		printf("Cannot decrypt aes data of size %zu\n", Length);
		return 0;
	}

	const size_t blocks = Length / 16;
	switch (KeySet->mode) {
		case AESMode::ECB: {
			KeySet->decrypt(Data, blocks);
			break;
		}
		case AESMode::CBC: {
			KeySet->decryptblock(&Data[Length - 16]);
			KeySet->load_iv((uint32_t *)&Data[Length - 16]);
			for (size_t i = 0; i < blocks - 1; i++) {
				KeySet->load_cp((uint32_t *)&Data[i * 16]);
				KeySet->decryptblock(&Data[i * 16]);
				KeySet->xor_iv((uint32_t *)&Data[i * 16]);
				KeySet->load_iv();
			}
			break;
		}
	}

	// Remove padding
	size_t padpos = KeySet->paddingpos(Length);
	uint8_t pad = (uint8_t)Data[padpos];
	if (pad > 16) { printf("Can't decrypt AES data [%u] - Corrupted padding\n", pad); return 0; }
	Length = padpos - pad + 1;
	Data[Length] = '\0';
	return Length;
}

#endif //PASSWORD_MANAGER_AES_H
